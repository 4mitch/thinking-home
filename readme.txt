ЯДРО

	создание плагина
		- наследуемся от базового класса и добавляем атрибут "Plugin"
		- переопределяем методы init, start, stop
	логирование
		- используем поле logger
		- настройка в конфиге
	предоставление событий для подписки
		- массив делегатов помечаем атрибутом "ImportMany"
		- выполняем их при помощи Run или RunAsync
	вызов команд других плагинов
		- обращаемся к экземплярам других плагинов через GetPlugin<>

	доступ к БД
		- пишем миграции и модель
		- не забываем указывать ключ для миграций!!!!
		... переопределяем метод CreateDbContext

		- при инициализации менеджера плагинов автоатически обновляется структура БД

	обновление компонентов
		- компоненты - пакеты nuget, 
		- все dll в корневой папке
		- при зависимости от другого пакета указываем элемент dependencies 
			(dll другого пакета не включаем напрямую в зависимый пакет)

ИНТЕРФЕЙС
	организация
		- навигационное меню, позволяющее переходить между страницами
		- некоторые страницы могут быть панелями с тайлами
	
	настройка
		- можно настраивать навигационное меню и наборы тайлов (элементы навигационного меню и тайлы указывают на методы контроллеров)

	средства для разработчика
		- возможность добавлять элементы в список доступных страниц
		- возможность добавлять элементы в список доступных тайлов
		- возможность посылать оповещения на клиент (обновление тайлов или интерфейса)
		- возможность посылать команды сервису
			- обращение к методам через команду $.th.send(pluginAlias, methodAlias, data, callback);
				(работает через listener, url сервиса - в настройках приложения)
		- возможность обработки оповещений от сервиса

	описание логики работы
		- виджеты - небольшие приложения MVC, которые находятся в папке Areas
		- виджеты предоставляют список методов контроллеров (страницы и тайлы)
		- в БД хранится конфигурация интерфейса




организация проекта
	компиляция плагинов
		..\build\Debug\<название.плагина>
		ставим всем элементам References свойство Copy Local = false





конфигурация плагинов
виджеты


плагины:
	- будильник
	- погода
	- noolite
	- listener
		методы, предоставляемые наружу, должны получать string и возвращать object
		для того, чтобы метод плагина был доступен наружу по HTTP, отмечаем его атрибутом [ExtCommand]
	- хранилище
	- таймер
	- управление пакетами через web-интерфейс
		показывается список пакетов из удаленного репозитория, можно их устанавливать/удалять
	- скрипты
		для того, чтобы метод плагина был доступен в скриптах, отмечаем его атрибутом [ScriptCommand]
		для вызова методов плагинов нужно использовать host.getPlugin("plugin").executeMethod("method", 1, 2, 3)
		для логирования нужно использовать объект host с методами logInfo и logError
		для отладки добавляем debugger и подуключается через visual studio

		для предоставления возможности скриптам подписываться на событие, отмечаем массив делегатов
		атрибутом [ScriptEvent] и вызываем их методом базового плагина 
			DynamicInvoke(OnCommandReceived, "noolite", "commandReceived", <parameters>);

		подписываем скрипты на события при помощи добавления записей в таблицу Scripts_EventHandler

		// пример скрипта
		var noolite = host.getPlugin("noolite");

		//debugger;

		if (noolite)
		{
			noolite.executeMethod("SetLevel", 7, 50);
			noolite.executeMethod("SetLevel", 6, 150);
		}
		else
		{
			host.logError("noolite plugin not found");    
		}



hourly -    http://api.wunderground.com/api/6924685d839dcbf6/hourly/lang:RU/q/Russia/Moscow.json
forecast -  http://api.wunderground.com/api/6924685d839dcbf6/forecast/lang:RU/q/Russia/Moscow.json